/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace HY_raffle {
  export type RaffleStruct = {
    paused: PromiseOrValue<boolean>;
    poolId: PromiseOrValue<BigNumberish>;
    players: PromiseOrValue<string>[];
    maxTickets: PromiseOrValue<BigNumberish>;
    ticketPrice: PromiseOrValue<BigNumberish>;
    numFreeTickets: PromiseOrValue<BigNumberish>;
    nftContract: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    rank: PromiseOrValue<BigNumberish>;
    lastOpenTimestamp: PromiseOrValue<BigNumberish>;
    lastWinTimestamp: PromiseOrValue<BigNumberish>;
    recentWinner: PromiseOrValue<string>;
  };

  export type RaffleStructOutput = [
    boolean,
    BigNumber,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    paused: boolean;
    poolId: BigNumber;
    players: string[];
    maxTickets: BigNumber;
    ticketPrice: BigNumber;
    numFreeTickets: BigNumber;
    nftContract: string;
    name: string;
    tokenId: BigNumber;
    rank: BigNumber;
    lastOpenTimestamp: BigNumber;
    lastWinTimestamp: BigNumber;
    recentWinner: string;
  };

  export type FreeTicketStruct = {
    qty: PromiseOrValue<BigNumberish>;
    lastClaim: PromiseOrValue<BigNumberish>;
  };

  export type FreeTicketStructOutput = [BigNumber, BigNumber] & {
    qty: BigNumber;
    lastClaim: BigNumber;
  };

  export type PoolStruct = {
    isOnlyHolders: PromiseOrValue<boolean>;
    isFreeTickets: PromiseOrValue<boolean>;
    rafflFundsPerc: PromiseOrValue<BigNumberish>;
    isRaffleActive: PromiseOrValue<boolean>;
    history: HY_raffle.RaffleStruct[];
  };

  export type PoolStructOutput = [
    boolean,
    boolean,
    BigNumber,
    boolean,
    HY_raffle.RaffleStructOutput[]
  ] & {
    isOnlyHolders: boolean;
    isFreeTickets: boolean;
    rafflFundsPerc: BigNumber;
    isRaffleActive: boolean;
    history: HY_raffle.RaffleStructOutput[];
  };
}

export interface HY_raffleInterface extends utils.Interface {
  functions: {
    "buyTickets(uint256,uint256)": FunctionFragment;
    "cancelRaffle(uint256)": FunctionFragment;
    "claimFreeTicket()": FunctionFragment;
    "getActualPlayers(uint256)": FunctionFragment;
    "getActualPlayersLength(uint256)": FunctionFragment;
    "getActualRaffle(uint256)": FunctionFragment;
    "getCasinoVault()": FunctionFragment;
    "getEnabledPools()": FunctionFragment;
    "getFreeTickets(address)": FunctionFragment;
    "getHYPAaddress()": FunctionFragment;
    "getHustlersaddress()": FunctionFragment;
    "getMaxFreeTicketsLimit()": FunctionFragment;
    "getPool(uint256)": FunctionFragment;
    "getPoolHistory(uint256)": FunctionFragment;
    "getRaffleFunds()": FunctionFragment;
    "getTimeLimFreeTickets()": FunctionFragment;
    "joinFreeRaffle(uint256,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "openRaffle(uint256,uint256,uint256,address,string,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverNonFungibleToken(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEnabledPools(uint256[])": FunctionFragment;
    "setPool(uint256,bool,bool,uint256)": FunctionFragment;
    "setRafflePaused(uint256,bool)": FunctionFragment;
    "set_HYPAaddress(address)": FunctionFragment;
    "set_Hustlersaddress(address)": FunctionFragment;
    "set_RafflesFundsAddress(address)": FunctionFragment;
    "set_casinoVault(address)": FunctionFragment;
    "set_maxFreeTicketsLimit(uint256)": FunctionFragment;
    "set_timeLimFreeTickets(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTickets"
      | "cancelRaffle"
      | "claimFreeTicket"
      | "getActualPlayers"
      | "getActualPlayersLength"
      | "getActualRaffle"
      | "getCasinoVault"
      | "getEnabledPools"
      | "getFreeTickets"
      | "getHYPAaddress"
      | "getHustlersaddress"
      | "getMaxFreeTicketsLimit"
      | "getPool"
      | "getPoolHistory"
      | "getRaffleFunds"
      | "getTimeLimFreeTickets"
      | "joinFreeRaffle"
      | "onERC721Received"
      | "openRaffle"
      | "owner"
      | "recoverNonFungibleToken"
      | "renounceOwnership"
      | "setEnabledPools"
      | "setPool"
      | "setRafflePaused"
      | "set_HYPAaddress"
      | "set_Hustlersaddress"
      | "set_RafflesFundsAddress"
      | "set_casinoVault"
      | "set_maxFreeTicketsLimit"
      | "set_timeLimFreeTickets"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRaffle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFreeTicket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActualPlayers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActualPlayersLength",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActualRaffle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCasinoVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnabledPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeTickets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHYPAaddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHustlersaddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxFreeTicketsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolHistory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeLimFreeTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinFreeRaffle",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openRaffle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverNonFungibleToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEnabledPools",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRafflePaused",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_HYPAaddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_Hustlersaddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_RafflesFundsAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_casinoVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_maxFreeTicketsLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_timeLimFreeTickets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFreeTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActualPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActualPlayersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActualRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCasinoVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnabledPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHYPAaddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHustlersaddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxFreeTicketsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeLimFreeTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinFreeRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openRaffle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverNonFungibleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnabledPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRafflePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_HYPAaddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_Hustlersaddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_RafflesFundsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_casinoVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_maxFreeTicketsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_timeLimFreeTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RaffleEnter(address)": EventFragment;
    "WinnerPicked(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaffleEnter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerPicked"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RaffleEnterEventObject {
  player: string;
}
export type RaffleEnterEvent = TypedEvent<[string], RaffleEnterEventObject>;

export type RaffleEnterEventFilter = TypedEventFilter<RaffleEnterEvent>;

export interface WinnerPickedEventObject {
  player: string;
}
export type WinnerPickedEvent = TypedEvent<[string], WinnerPickedEventObject>;

export type WinnerPickedEventFilter = TypedEventFilter<WinnerPickedEvent>;

export interface HY_raffle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HY_raffleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTickets(
      _poolId: PromiseOrValue<BigNumberish>,
      _numTickets: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFreeTicket(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActualPlayers(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getActualPlayersLength(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActualRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[HY_raffle.RaffleStructOutput]>;

    getCasinoVault(overrides?: CallOverrides): Promise<[string]>;

    getEnabledPools(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getFreeTickets(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[HY_raffle.FreeTicketStructOutput]>;

    getHYPAaddress(overrides?: CallOverrides): Promise<[string]>;

    getHustlersaddress(overrides?: CallOverrides): Promise<[string]>;

    getMaxFreeTicketsLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[HY_raffle.PoolStructOutput]>;

    getPoolHistory(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[HY_raffle.RaffleStructOutput[]]>;

    getRaffleFunds(overrides?: CallOverrides): Promise<[string]>;

    getTimeLimFreeTickets(overrides?: CallOverrides): Promise<[BigNumber]>;

    joinFreeRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      _numTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      _maxTickets: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _nftContract: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoverNonFungibleToken(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEnabledPools(
      _enabledPools: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _isOnlyHolders: PromiseOrValue<boolean>,
      _isFreeTickets: PromiseOrValue<boolean>,
      _rafflFundsPerc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRafflePaused(
      poolId: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_HYPAaddress(
      _HYPAaddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_Hustlersaddress(
      _Hustlersaddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_RafflesFundsAddress(
      _rafflesFunds: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_casinoVault(
      _casinoVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_maxFreeTicketsLimit(
      _maxFreeTicketsLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_timeLimFreeTickets(
      _timeLimFreeTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyTickets(
    _poolId: PromiseOrValue<BigNumberish>,
    _numTickets: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelRaffle(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFreeTicket(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActualPlayers(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getActualPlayersLength(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActualRaffle(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<HY_raffle.RaffleStructOutput>;

  getCasinoVault(overrides?: CallOverrides): Promise<string>;

  getEnabledPools(overrides?: CallOverrides): Promise<BigNumber[]>;

  getFreeTickets(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<HY_raffle.FreeTicketStructOutput>;

  getHYPAaddress(overrides?: CallOverrides): Promise<string>;

  getHustlersaddress(overrides?: CallOverrides): Promise<string>;

  getMaxFreeTicketsLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getPool(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<HY_raffle.PoolStructOutput>;

  getPoolHistory(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<HY_raffle.RaffleStructOutput[]>;

  getRaffleFunds(overrides?: CallOverrides): Promise<string>;

  getTimeLimFreeTickets(overrides?: CallOverrides): Promise<BigNumber>;

  joinFreeRaffle(
    _poolId: PromiseOrValue<BigNumberish>,
    _numTickets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openRaffle(
    _poolId: PromiseOrValue<BigNumberish>,
    _maxTickets: PromiseOrValue<BigNumberish>,
    _ticketPrice: PromiseOrValue<BigNumberish>,
    _nftContract: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _rank: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  recoverNonFungibleToken(
    _token: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEnabledPools(
    _enabledPools: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPool(
    _poolId: PromiseOrValue<BigNumberish>,
    _isOnlyHolders: PromiseOrValue<boolean>,
    _isFreeTickets: PromiseOrValue<boolean>,
    _rafflFundsPerc: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRafflePaused(
    poolId: PromiseOrValue<BigNumberish>,
    paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_HYPAaddress(
    _HYPAaddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_Hustlersaddress(
    _Hustlersaddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_RafflesFundsAddress(
    _rafflesFunds: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_casinoVault(
    _casinoVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_maxFreeTicketsLimit(
    _maxFreeTicketsLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_timeLimFreeTickets(
    _timeLimFreeTickets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyTickets(
      _poolId: PromiseOrValue<BigNumberish>,
      _numTickets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFreeTicket(overrides?: CallOverrides): Promise<void>;

    getActualPlayers(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getActualPlayersLength(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActualRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<HY_raffle.RaffleStructOutput>;

    getCasinoVault(overrides?: CallOverrides): Promise<string>;

    getEnabledPools(overrides?: CallOverrides): Promise<BigNumber[]>;

    getFreeTickets(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<HY_raffle.FreeTicketStructOutput>;

    getHYPAaddress(overrides?: CallOverrides): Promise<string>;

    getHustlersaddress(overrides?: CallOverrides): Promise<string>;

    getMaxFreeTicketsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<HY_raffle.PoolStructOutput>;

    getPoolHistory(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<HY_raffle.RaffleStructOutput[]>;

    getRaffleFunds(overrides?: CallOverrides): Promise<string>;

    getTimeLimFreeTickets(overrides?: CallOverrides): Promise<BigNumber>;

    joinFreeRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      _numTickets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    openRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      _maxTickets: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _nftContract: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    recoverNonFungibleToken(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEnabledPools(
      _enabledPools: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _isOnlyHolders: PromiseOrValue<boolean>,
      _isFreeTickets: PromiseOrValue<boolean>,
      _rafflFundsPerc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRafflePaused(
      poolId: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_HYPAaddress(
      _HYPAaddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_Hustlersaddress(
      _Hustlersaddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_RafflesFundsAddress(
      _rafflesFunds: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_casinoVault(
      _casinoVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_maxFreeTicketsLimit(
      _maxFreeTicketsLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_timeLimFreeTickets(
      _timeLimFreeTickets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RaffleEnter(address)"(
      player?: PromiseOrValue<string> | null
    ): RaffleEnterEventFilter;
    RaffleEnter(player?: PromiseOrValue<string> | null): RaffleEnterEventFilter;

    "WinnerPicked(address)"(
      player?: PromiseOrValue<string> | null
    ): WinnerPickedEventFilter;
    WinnerPicked(
      player?: PromiseOrValue<string> | null
    ): WinnerPickedEventFilter;
  };

  estimateGas: {
    buyTickets(
      _poolId: PromiseOrValue<BigNumberish>,
      _numTickets: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFreeTicket(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActualPlayers(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActualPlayersLength(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActualRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCasinoVault(overrides?: CallOverrides): Promise<BigNumber>;

    getEnabledPools(overrides?: CallOverrides): Promise<BigNumber>;

    getFreeTickets(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHYPAaddress(overrides?: CallOverrides): Promise<BigNumber>;

    getHustlersaddress(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxFreeTicketsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolHistory(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRaffleFunds(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeLimFreeTickets(overrides?: CallOverrides): Promise<BigNumber>;

    joinFreeRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      _numTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      _maxTickets: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _nftContract: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverNonFungibleToken(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEnabledPools(
      _enabledPools: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _isOnlyHolders: PromiseOrValue<boolean>,
      _isFreeTickets: PromiseOrValue<boolean>,
      _rafflFundsPerc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRafflePaused(
      poolId: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_HYPAaddress(
      _HYPAaddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_Hustlersaddress(
      _Hustlersaddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_RafflesFundsAddress(
      _rafflesFunds: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_casinoVault(
      _casinoVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_maxFreeTicketsLimit(
      _maxFreeTicketsLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_timeLimFreeTickets(
      _timeLimFreeTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTickets(
      _poolId: PromiseOrValue<BigNumberish>,
      _numTickets: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFreeTicket(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActualPlayers(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActualPlayersLength(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActualRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCasinoVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEnabledPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFreeTickets(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHYPAaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHustlersaddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxFreeTicketsLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolHistory(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRaffleFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimeLimFreeTickets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinFreeRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      _numTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openRaffle(
      _poolId: PromiseOrValue<BigNumberish>,
      _maxTickets: PromiseOrValue<BigNumberish>,
      _ticketPrice: PromiseOrValue<BigNumberish>,
      _nftContract: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverNonFungibleToken(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEnabledPools(
      _enabledPools: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _isOnlyHolders: PromiseOrValue<boolean>,
      _isFreeTickets: PromiseOrValue<boolean>,
      _rafflFundsPerc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRafflePaused(
      poolId: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_HYPAaddress(
      _HYPAaddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_Hustlersaddress(
      _Hustlersaddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_RafflesFundsAddress(
      _rafflesFunds: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_casinoVault(
      _casinoVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_maxFreeTicketsLimit(
      _maxFreeTicketsLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_timeLimFreeTickets(
      _timeLimFreeTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
