/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type {
    FunctionFragment,
    Result,
    EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from "./common";

export interface HY_CasinoInterface extends utils.Interface {
    functions: {
        "HYPA()": FunctionFragment;
        "coinFlip(bool)": FunctionFragment;
        "coinRecentWinAmount()": FunctionFragment;
        "coinRecentWinner()": FunctionFragment;
        "coinTotalBets()": FunctionFragment;
        "enabledBets(uint256)": FunctionFragment;
        "get_HYPAaddress()": FunctionFragment;
        "get_HustlersAddress()": FunctionFragment;
        "get_balance()": FunctionFragment;
        "get_casinoVault()": FunctionFragment;
        "get_coinRecentWinAmount()": FunctionFragment;
        "get_coinRecentWinner()": FunctionFragment;
        "get_coinTotalBets()": FunctionFragment;
        "get_enabledBets()": FunctionFragment;
        "get_hiLoRecentWinAmount()": FunctionFragment;
        "get_hiLoRecentWinner()": FunctionFragment;
        "get_hiLoTotalBets()": FunctionFragment;
        "get_onlyHolders()": FunctionFragment;
        "get_paused()": FunctionFragment;
        "get_winnerPerc()": FunctionFragment;
        "hiLoRecentWinAmount()": FunctionFragment;
        "hiLoRecentWinner()": FunctionFragment;
        "hiLoTotalBets()": FunctionFragment;
        "hiLo_card(bool)": FunctionFragment;
        "onlyHolders()": FunctionFragment;
        "owner()": FunctionFragment;
        "paused()": FunctionFragment;
        "refillContract()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "set_HYPAaddress(address)": FunctionFragment;
        "set_HustlersAddress(address)": FunctionFragment;
        "set_casinoVault(address)": FunctionFragment;
        "set_enabledBets(uint256[])": FunctionFragment;
        "set_onlyHolders(bool)": FunctionFragment;
        "set_paused(bool)": FunctionFragment;
        "set_winnerPerc(uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "withdraw()": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "HYPA"
            | "coinFlip"
            | "coinRecentWinAmount"
            | "coinRecentWinner"
            | "coinTotalBets"
            | "enabledBets"
            | "get_HYPAaddress"
            | "get_HustlersAddress"
            | "get_balance"
            | "get_casinoVault"
            | "get_coinRecentWinAmount"
            | "get_coinRecentWinner"
            | "get_coinTotalBets"
            | "get_enabledBets"
            | "get_hiLoRecentWinAmount"
            | "get_hiLoRecentWinner"
            | "get_hiLoTotalBets"
            | "get_onlyHolders"
            | "get_paused"
            | "get_winnerPerc"
            | "hiLoRecentWinAmount"
            | "hiLoRecentWinner"
            | "hiLoTotalBets"
            | "hiLo_card"
            | "onlyHolders"
            | "owner"
            | "paused"
            | "refillContract"
            | "renounceOwnership"
            | "set_HYPAaddress"
            | "set_HustlersAddress"
            | "set_casinoVault"
            | "set_enabledBets"
            | "set_onlyHolders"
            | "set_paused"
            | "set_winnerPerc"
            | "transferOwnership"
            | "withdraw"
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "HYPA", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "coinFlip",
        values: [PromiseOrValue<boolean>]
    ): string;
    encodeFunctionData(
        functionFragment: "coinRecentWinAmount",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "coinRecentWinner",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "coinTotalBets",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "enabledBets",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "get_HYPAaddress",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_HustlersAddress",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_balance",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_casinoVault",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_coinRecentWinAmount",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_coinRecentWinner",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_coinTotalBets",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_enabledBets",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_hiLoRecentWinAmount",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_hiLoRecentWinner",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_hiLoTotalBets",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_onlyHolders",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_paused",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "get_winnerPerc",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "hiLoRecentWinAmount",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "hiLoRecentWinner",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "hiLoTotalBets",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "hiLo_card",
        values: [PromiseOrValue<boolean>]
    ): string;
    encodeFunctionData(
        functionFragment: "onlyHolders",
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "refillContract",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "renounceOwnership",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "set_HYPAaddress",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "set_HustlersAddress",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "set_casinoVault",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "set_enabledBets",
        values: [PromiseOrValue<BigNumberish>[]]
    ): string;
    encodeFunctionData(
        functionFragment: "set_onlyHolders",
        values: [PromiseOrValue<boolean>]
    ): string;
    encodeFunctionData(
        functionFragment: "set_paused",
        values: [PromiseOrValue<boolean>]
    ): string;
    encodeFunctionData(
        functionFragment: "set_winnerPerc",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "transferOwnership",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

    decodeFunctionResult(functionFragment: "HYPA", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "coinFlip", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "coinRecentWinAmount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "coinRecentWinner",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "coinTotalBets",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "enabledBets",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_HYPAaddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_HustlersAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_balance",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_casinoVault",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_coinRecentWinAmount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_coinRecentWinner",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_coinTotalBets",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_enabledBets",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_hiLoRecentWinAmount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_hiLoRecentWinner",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_hiLoTotalBets",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "get_onlyHolders",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "get_paused", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "get_winnerPerc",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "hiLoRecentWinAmount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "hiLoRecentWinner",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "hiLoTotalBets",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "hiLo_card", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "onlyHolders",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "refillContract",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "renounceOwnership",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "set_HYPAaddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "set_HustlersAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "set_casinoVault",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "set_enabledBets",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "set_onlyHolders",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "set_paused", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "set_winnerPerc",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "transferOwnership",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

    events: {
        "CoinFlip__bet(address,uint256,bool)": EventFragment;
        "HiLo__bet(address,uint256,uint256,bool)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "CoinFlip__bet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "HiLo__bet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface CoinFlip__betEventObject {
    player: string;
    betId: BigNumber;
    won: boolean;
}
export type CoinFlip__betEvent = TypedEvent<
    [string, BigNumber, boolean],
    CoinFlip__betEventObject
>;

export type CoinFlip__betEventFilter = TypedEventFilter<CoinFlip__betEvent>;

export interface HiLo__betEventObject {
    player: string;
    betId: BigNumber;
    card: BigNumber;
    won: boolean;
}
export type HiLo__betEvent = TypedEvent<
    [string, BigNumber, BigNumber, boolean],
    HiLo__betEventObject
>;

export type HiLo__betEventFilter = TypedEventFilter<HiLo__betEvent>;

export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;

export interface HY_Casino extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: HY_CasinoInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        HYPA(overrides?: CallOverrides): Promise<[string]>;

        coinFlip(
            _coinSide: PromiseOrValue<boolean>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        coinRecentWinAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        coinRecentWinner(overrides?: CallOverrides): Promise<[string]>;

        coinTotalBets(overrides?: CallOverrides): Promise<[BigNumber]>;

        enabledBets(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        get_HYPAaddress(overrides?: CallOverrides): Promise<[string]>;

        get_HustlersAddress(overrides?: CallOverrides): Promise<[string]>;

        get_balance(overrides?: CallOverrides): Promise<[BigNumber]>;

        get_casinoVault(overrides?: CallOverrides): Promise<[string]>;

        get_coinRecentWinAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        get_coinRecentWinner(overrides?: CallOverrides): Promise<[string]>;

        get_coinTotalBets(overrides?: CallOverrides): Promise<[BigNumber]>;

        get_enabledBets(overrides?: CallOverrides): Promise<[BigNumber[]]>;

        get_hiLoRecentWinAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        get_hiLoRecentWinner(overrides?: CallOverrides): Promise<[string]>;

        get_hiLoTotalBets(overrides?: CallOverrides): Promise<[BigNumber]>;

        get_onlyHolders(overrides?: CallOverrides): Promise<[boolean]>;

        get_paused(overrides?: CallOverrides): Promise<[boolean]>;

        get_winnerPerc(overrides?: CallOverrides): Promise<[BigNumber]>;

        hiLoRecentWinAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        hiLoRecentWinner(overrides?: CallOverrides): Promise<[string]>;

        hiLoTotalBets(overrides?: CallOverrides): Promise<[BigNumber]>;

        hiLo_card(
            _high: PromiseOrValue<boolean>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        onlyHolders(overrides?: CallOverrides): Promise<[boolean]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        paused(overrides?: CallOverrides): Promise<[boolean]>;

        refillContract(
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        set_HYPAaddress(
            _new: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        set_HustlersAddress(
            _new: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        set_casinoVault(
            _new: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        set_enabledBets(
            _new: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        set_onlyHolders(
            _new: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        set_paused(
            _new: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        set_winnerPerc(
            _new: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        withdraw(
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;
    };

    HYPA(overrides?: CallOverrides): Promise<string>;

    coinFlip(
        _coinSide: PromiseOrValue<boolean>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    coinRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

    coinRecentWinner(overrides?: CallOverrides): Promise<string>;

    coinTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

    enabledBets(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_HYPAaddress(overrides?: CallOverrides): Promise<string>;

    get_HustlersAddress(overrides?: CallOverrides): Promise<string>;

    get_balance(overrides?: CallOverrides): Promise<BigNumber>;

    get_casinoVault(overrides?: CallOverrides): Promise<string>;

    get_coinRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

    get_coinRecentWinner(overrides?: CallOverrides): Promise<string>;

    get_coinTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

    get_enabledBets(overrides?: CallOverrides): Promise<BigNumber[]>;

    get_hiLoRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

    get_hiLoRecentWinner(overrides?: CallOverrides): Promise<string>;

    get_hiLoTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

    get_onlyHolders(overrides?: CallOverrides): Promise<boolean>;

    get_paused(overrides?: CallOverrides): Promise<boolean>;

    get_winnerPerc(overrides?: CallOverrides): Promise<BigNumber>;

    hiLoRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

    hiLoRecentWinner(overrides?: CallOverrides): Promise<string>;

    hiLoTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

    hiLo_card(
        _high: PromiseOrValue<boolean>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onlyHolders(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    refillContract(
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_HYPAaddress(
        _new: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_HustlersAddress(
        _new: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_casinoVault(
        _new: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_enabledBets(
        _new: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_onlyHolders(
        _new: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_paused(
        _new: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_winnerPerc(
        _new: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        HYPA(overrides?: CallOverrides): Promise<string>;

        coinFlip(
            _coinSide: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<void>;

        coinRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

        coinRecentWinner(overrides?: CallOverrides): Promise<string>;

        coinTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

        enabledBets(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        get_HYPAaddress(overrides?: CallOverrides): Promise<string>;

        get_HustlersAddress(overrides?: CallOverrides): Promise<string>;

        get_balance(overrides?: CallOverrides): Promise<BigNumber>;

        get_casinoVault(overrides?: CallOverrides): Promise<string>;

        get_coinRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

        get_coinRecentWinner(overrides?: CallOverrides): Promise<string>;

        get_coinTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

        get_enabledBets(overrides?: CallOverrides): Promise<BigNumber[]>;

        get_hiLoRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

        get_hiLoRecentWinner(overrides?: CallOverrides): Promise<string>;

        get_hiLoTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

        get_onlyHolders(overrides?: CallOverrides): Promise<boolean>;

        get_paused(overrides?: CallOverrides): Promise<boolean>;

        get_winnerPerc(overrides?: CallOverrides): Promise<BigNumber>;

        hiLoRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

        hiLoRecentWinner(overrides?: CallOverrides): Promise<string>;

        hiLoTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

        hiLo_card(
            _high: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<void>;

        onlyHolders(overrides?: CallOverrides): Promise<boolean>;

        owner(overrides?: CallOverrides): Promise<string>;

        paused(overrides?: CallOverrides): Promise<boolean>;

        refillContract(overrides?: CallOverrides): Promise<void>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        set_HYPAaddress(
            _new: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        set_HustlersAddress(
            _new: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        set_casinoVault(
            _new: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        set_enabledBets(
            _new: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<void>;

        set_onlyHolders(
            _new: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<void>;

        set_paused(
            _new: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<void>;

        set_winnerPerc(
            _new: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        withdraw(overrides?: CallOverrides): Promise<void>;
    };

    filters: {
        "CoinFlip__bet(address,uint256,bool)"(
            player?: PromiseOrValue<string> | null,
            betId?: PromiseOrValue<BigNumberish> | null,
            won?: null
        ): CoinFlip__betEventFilter;
        CoinFlip__bet(
            player?: PromiseOrValue<string> | null,
            betId?: PromiseOrValue<BigNumberish> | null,
            won?: null
        ): CoinFlip__betEventFilter;

        "HiLo__bet(address,uint256,uint256,bool)"(
            player?: PromiseOrValue<string> | null,
            betId?: PromiseOrValue<BigNumberish> | null,
            card?: null,
            won?: null
        ): HiLo__betEventFilter;
        HiLo__bet(
            player?: PromiseOrValue<string> | null,
            betId?: PromiseOrValue<BigNumberish> | null,
            card?: null,
            won?: null
        ): HiLo__betEventFilter;

        "OwnershipTransferred(address,address)"(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;
    };

    estimateGas: {
        HYPA(overrides?: CallOverrides): Promise<BigNumber>;

        coinFlip(
            _coinSide: PromiseOrValue<boolean>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        coinRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

        coinRecentWinner(overrides?: CallOverrides): Promise<BigNumber>;

        coinTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

        enabledBets(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        get_HYPAaddress(overrides?: CallOverrides): Promise<BigNumber>;

        get_HustlersAddress(overrides?: CallOverrides): Promise<BigNumber>;

        get_balance(overrides?: CallOverrides): Promise<BigNumber>;

        get_casinoVault(overrides?: CallOverrides): Promise<BigNumber>;

        get_coinRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

        get_coinRecentWinner(overrides?: CallOverrides): Promise<BigNumber>;

        get_coinTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

        get_enabledBets(overrides?: CallOverrides): Promise<BigNumber>;

        get_hiLoRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

        get_hiLoRecentWinner(overrides?: CallOverrides): Promise<BigNumber>;

        get_hiLoTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

        get_onlyHolders(overrides?: CallOverrides): Promise<BigNumber>;

        get_paused(overrides?: CallOverrides): Promise<BigNumber>;

        get_winnerPerc(overrides?: CallOverrides): Promise<BigNumber>;

        hiLoRecentWinAmount(overrides?: CallOverrides): Promise<BigNumber>;

        hiLoRecentWinner(overrides?: CallOverrides): Promise<BigNumber>;

        hiLoTotalBets(overrides?: CallOverrides): Promise<BigNumber>;

        hiLo_card(
            _high: PromiseOrValue<boolean>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        onlyHolders(overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        paused(overrides?: CallOverrides): Promise<BigNumber>;

        refillContract(
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        set_HYPAaddress(
            _new: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        set_HustlersAddress(
            _new: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        set_casinoVault(
            _new: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        set_enabledBets(
            _new: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        set_onlyHolders(
            _new: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        set_paused(
            _new: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        set_winnerPerc(
            _new: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        withdraw(
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        HYPA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        coinFlip(
            _coinSide: PromiseOrValue<boolean>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        coinRecentWinAmount(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        coinRecentWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        coinTotalBets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        enabledBets(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        get_HYPAaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        get_HustlersAddress(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        get_balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        get_casinoVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        get_coinRecentWinAmount(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        get_coinRecentWinner(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        get_coinTotalBets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        get_enabledBets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        get_hiLoRecentWinAmount(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        get_hiLoRecentWinner(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        get_hiLoTotalBets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        get_onlyHolders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        get_paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        get_winnerPerc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        hiLoRecentWinAmount(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        hiLoRecentWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        hiLoTotalBets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        hiLo_card(
            _high: PromiseOrValue<boolean>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        onlyHolders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        refillContract(
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        set_HYPAaddress(
            _new: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        set_HustlersAddress(
            _new: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        set_casinoVault(
            _new: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        set_enabledBets(
            _new: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        set_onlyHolders(
            _new: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        set_paused(
            _new: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        set_winnerPerc(
            _new: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        withdraw(
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;
    };
}
